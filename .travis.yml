language: rust
sudo: false
dist: trusty # still in beta, but required for the prebuilt TF binaries

cache:
  cargo: true
  # FIXME: We don't need bazel for now
  # directories:
  #   - $HOME/.cache/bazel

rust:
  - stable
  # FIXME: Should nightly be allowed to fail? Should a specific nightly
  #        be pinned and _not_ allowed to fail?
  - nightly

install:
  - export CC="gcc-4.9" CXX="g++-4.9"
  # FIXME: We don't need bazel for now
  # - source travis-ci/install.sh

script:
  - export RUST_BACKTRACE=1
  - cargo test -vv -j 2 --features tensorflow_unstable
  - cargo run --example regression
  - cargo run --features tensorflow_unstable --example expressions
  - cargo doc -vv --features tensorflow_unstable
  # Compile the tests, but don't run them. This makes sure the prebuilt tensorflow.so
  # is downloaded and available (if required).
  - (cd tensorflow-sys && cargo test --no-run -vv -j 1)
  - tree
  - # TODO(#66): Re-enable: (cd tensorflow-sys && cargo test -vv -j 1)
  - (cd tensorflow-sys && cargo doc -vv)
  # Run tests through valgrind, but only on nightly since Rust's standard allocator (jemalloc)
  # does not work with valgrind. One has to use the system allocator (`alloc_system`) which
  # is only available on nightly.
  # Clean the stable artifacts
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then (cd tensorflow-sys && cargo clean); fi
  # Compile the tests using the 'nightly' feature, but don't run them.
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then (cd tensorflow-sys && cargo test --no-run -vv -j 1 --features=nightly); fi
  # Run the tests using valgrind.
  # FIXME: Add suppressions to ignore "errors" in cargo.
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then (cd tensorflow-sys && valgrind --error-exitcode=42 --leak-check=full cargo test -vv -j 1 --features=nightly); fi


addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test

    packages:
      - g++-4.9
      - gcc-4.9
      - oracle-java8-installer
      - python-numpy
      - swig

notifications:
  email: false
