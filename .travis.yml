language: rust
sudo: false
dist: trusty # still in beta, but required for the prebuilt TF binaries

cache:
  cargo: true
  # FIXME: We don't need bazel for now
  # directories:
  #   - $HOME/.cache/bazel

env:
  - valgrind="valgrind --error-exitcode=42 --leak-check=full"

rust:
  - stable
  # FIXME: Should nightly be allowed to fail? Should a specific nightly
  #        be pinned and _not_ allowed to fail?
  - nightly

install:
  - export CC="gcc-4.9" CXX="g++-4.9"
  # FIXME: We don't need bazel for now
  # - source travis-ci/install.sh

script:
  - export RUST_BACKTRACE=1
  # Build and test the tensorflow-sys crate first
  # Compile the tests, but don't run them. This makes sure the prebuilt tensorflow.so
  # is downloaded and available (if required).
  - (cd tensorflow-sys && cargo test --no-run -vv -j 1)
  # FIXME: Make sure this does not fail the CI when pre-built binaries are used.
  - export TFSO=$(ls $TRAVIS_BUILD_DIR/tensorflow-sys/target/libtensorflow-*-*-*-*/lib/)
  - ls -d $TFSO
  - find $TFSO
  - # TODO(#66): Re-enable: (cd tensorflow-sys && cargo test -vv -j 1)
  - (cd tensorflow-sys && cargo doc -vv)
  # Run tests through valgrind, but only on nightly since Rust's standard allocator (jemalloc)
  # does not work with valgrind. One has to use the system allocator (`alloc_system`) which
  # is only available on nightly.
  # Clean the stable artifacts
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then (cd tensorflow-sys && cargo clean); fi
  # Compile the tests using the 'nightly' feature, but don't run them.
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then (cd tensorflow-sys && cargo test --no-run -vv -j 1 --features=nightly); fi
  # Run the tests using valgrind.
  # FIXME: Running valgrind on cargo will catch "errors" inside cargo, not the binary to test. One could use
  #        valgrind's `--trace-children=yes` but valgrind would still fail on cargo. Maybe suppressions could be
  #        used. Meanwhile, just call the binaries directly.
  # - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then (cd tensorflow-sys && $valgrind cargo test -vv -j 1 --features=nightly); fi
  - export TEST_LIB_LINK=$(ls $TRAVIS_BUILD_DIR/target/debug/deps/lib-*)
  - export TEST_LIB_SYS=$(ls $TRAVIS_BUILD_DIR/target/debug/deps/tensorflow_sys-*)
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then LD_LIBRARY_PATH=$TFSO $valgrind $TEST_LIB_LINK ; fi
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then LD_LIBRARY_PATH=$TFSO $valgrind $TEST_LIB_SYS ; fi
  # Now build and test the main crate
  - cargo test -vv -j 2 --features tensorflow_unstable
  - cargo run --example regression
  - cargo run --features tensorflow_unstable --example expressions
  # Run the tests through valgrind
  # Clean the stable artifacts
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then cargo clean; fi
  # Compile the tests using the 'nightly' feature, then run them through valgrind
  # FIXME: Add suppressions to ignore "errors" in cargo.
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then           cargo test --no-run -vv -j 2 --features tensorflow_unstable --features=nightly; fi
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then $valgrind cargo test -vv -j 2 --features tensorflow_unstable --features=nightly; fi
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then           cargo build --example regression --features=nightly; fi
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then $valgrind cargo run   --example regression --features=nightly; fi
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then           cargo build --example regression --features=nightly; fi
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then $valgrind cargo run   --example regression --features=nightly; fi
  # Now build the doc
  - cargo doc -vv --features tensorflow_unstable


addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test

    packages:
      - g++-4.9
      - gcc-4.9
      - oracle-java8-installer
      - python-numpy
      - swig
      - valgrind

notifications:
  email: false
